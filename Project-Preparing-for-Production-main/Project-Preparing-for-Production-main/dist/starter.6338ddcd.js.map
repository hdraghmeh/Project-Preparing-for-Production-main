{"mappings":"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","sources":["<anon>","starter/src/index.js","starter/src/cardSetsPage.js","starter/src/cardsPage.js","starter/src/createCard.js","starter/src/errors.js","starter/src/utilityRenderFunctions.js","starter/src/shuffle.js","starter/src/createSet.js","starter/src/aboutPage.js","starter/src/homePage.js"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequireccf0\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequireccf0\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n//DO NOT CHANGE ANYTHING IN THIS FILE//\n// This file is responsible for the navigation menu and the initial loading of the project.\n//These are all the functions that render the pages\n//DO NOT CHANGE ANYTHING IN THIS FILE//\n// Our application contains flashcard study sets.\n// This file is responsible for loading the page that\n// displays the collection of sets.\n// Users can click on a set to view and interact with the flashcards.\n// Loads data for card sets\n\nvar $kfSmS = parcelRequire(\"kfSmS\");\n//DO NOT CHANGE ANYTHING IN THIS FILE//\n// This file is responsible for rendering the full flashcard set,\n// with buttons to navigate between cards, a form to create new cards,\n// and a button to shuffle the cards.\n// This function is responsible for generating the form used to create a new card.\n//DO NOT CHANGE ANYTHING IN THIS FILE//\n// This file is responsible for the form that creates a new flashcard.\n// This function is responsible for rendering a flashcard.\n// It will be called upon form submission to render the newly created card.\n\n//DO NOT CHANGE ANYTHING IN THIS FILE//\n//This file is responsible for creating errors for our form\nconst $ff0f2a9793ea3d6a$export$3879b24e8245693d = (message)=>{\n    const form = document.querySelector(\"form\");\n    const existingError = document.querySelector(\".error\");\n    if (!existingError) {\n        const error = document.createElement(\"p\");\n        error.textContent = message;\n        error.style.color = \"red\";\n        error.className = \"error\";\n        form.appendChild(error);\n    } else if (existingError.textContent !== message) existingError.textContent = message;\n};\n\n\n// Create a general element with specified text\nconst $54c153a8b9560190$export$c8a8987d4410bf2d = (elementType, text)=>{\n    const element = document.createElement(elementType);\n    element.textContent = text;\n    return element;\n};\n// Creates images with alt attribute\nconst $54c153a8b9560190$export$ec664d7487540b = (url, alt)=>{\n    const img = document.createElement('img');\n    img.src = url;\n    img.alt = alt;\n    return img;\n};\n// Create a header element with specified text and data attribute\nconst $54c153a8b9560190$export$798e69447a57ffe5 = (headerType, text, dataCy)=>{\n    const header = document.createElement(headerType);\n    header.textContent = text;\n    header.setAttribute('data-cy', dataCy);\n    return header;\n};\n// Create a button that toggles the visibility of the form\nconst $54c153a8b9560190$export$934057542c6ca351 = (text, element)=>{\n    const button = document.createElement('button');\n    button.textContent = text;\n    button.addEventListener('click', ()=>{\n        element.classList.toggle('notVisible');\n    });\n    return button;\n};\n// Form Helper Functions\n// Helper function to create a label element\nconst $54c153a8b9560190$export$f2839682b8c07f35 = (text, htmlFor)=>{\n    const label = document.createElement('label');\n    label.textContent = text;\n    label.setAttribute('for', htmlFor);\n    return label;\n};\n// Helper function to create an input element\nconst $54c153a8b9560190$export$d80fffb1deb3b97e = (name)=>{\n    const input = document.createElement('input');\n    input.name = name;\n    input.id = name;\n    return input;\n};\n// Helper function to create a submit button\nconst $54c153a8b9560190$export$96449729d5b90cea = (value)=>{\n    const submit = document.createElement('input');\n    submit.type = 'submit';\n    submit.value = value;\n    return submit;\n};\n\n\n// This function will generate the create card form\nconst $95a1a5ce4ae36b78$export$26b43a65ed9aa70e = (set)=>{\n    // Create a header for the form\n    const h3 = (0, $54c153a8b9560190$export$798e69447a57ffe5)(\"h3\", \"Create Cards\", \"create_cards\");\n    // Creates form element\n    const cardForm = document.createElement(\"form\");\n    // Sets an attribute that will be used to select the form during testing\n    cardForm.setAttribute(\"data-cy\", \"card_form\");\n    // Creates a label for the Term input\n    const termLabel = (0, $54c153a8b9560190$export$f2839682b8c07f35)(\"Term\", \"termInput\");\n    // Creates input for the term\n    const termInput = (0, $54c153a8b9560190$export$d80fffb1deb3b97e)(\"termInput\");\n    // Creates label for description\n    const descriptionLabel = (0, $54c153a8b9560190$export$f2839682b8c07f35)(\"Description\", \"descriptionInput\");\n    // Creates input for description\n    const descriptionInput = (0, $54c153a8b9560190$export$d80fffb1deb3b97e)(\"descriptionInput\");\n    //Creates submit input\n    const addCardBtn = (0, $54c153a8b9560190$export$96449729d5b90cea)(\"Add Card\");\n    // Handle form submission ane errors\n    cardForm.addEventListener(\"submit\", (e)=>{\n        // Prevents forms default behavior\n        e.preventDefault();\n        // Gets the input values from term and description\n        const term = e.target.termInput.value;\n        const description = e.target.descriptionInput.value;\n        // Handles error if user enters an empty string in any of the inputs\n        if (!term && !description) (0, $ff0f2a9793ea3d6a$export$3879b24e8245693d)(\"TERM AND DESCRIPTION CANNOT BE EMPTY\");\n        else if (!term) (0, $ff0f2a9793ea3d6a$export$3879b24e8245693d)(\"TERM CANNOT BE EMPTY\");\n        else if (!description) (0, $ff0f2a9793ea3d6a$export$3879b24e8245693d)(\"DESCRIPTION CANNOT BE EMPTY\");\n        else $95a1a5ce4ae36b78$var$addCard(term, description, set);\n    });\n    // Append form elements to the form\n    cardForm.append(termLabel, termInput, descriptionLabel, descriptionInput, addCardBtn);\n    // Creates a container for the form elements and header\n    const container = document.createElement(\"div\");\n    container.append(h3, cardForm);\n    return container;\n};\n// Function to add a new card to the data set\nconst $95a1a5ce4ae36b78$var$addCard = (term, description, set)=>{\n    set.push({\n        term: term,\n        description: description\n    });\n    (0, $3994a555bf56dffc$export$f58269ac8b729db4)(set, set.length - 1); // Render the new card\n};\n\n\nconst $5cc91fecbf839bcf$export$448332262467e042 = (cards)=>{\n    let current = cards.length;\n    let newCardsArray = [\n        ...cards\n    ];\n    while(current > 0){\n        let randomIndex = Math.floor(Math.random() * current);\n        current--;\n        [newCardsArray[current], newCardsArray[randomIndex]] = [\n            newCardsArray[randomIndex],\n            newCardsArray[current]\n        ];\n    }\n    return newCardsArray;\n};\n\n\n\n// The flash cards have two sides\n// This generates one side of a flashcard card\nconst $3994a555bf56dffc$export$f3ba7e44516b087c = (text, className)=>{\n    // Creates a container element for the card\n    const div = document.createElement(\"div\");\n    // Creates the paragraph that will hold the text content\n    const p = document.createElement(\"p\");\n    p.textContent = text;\n    div.className = className;\n    //Appends the content to the container\n    div.append(p);\n    return div;\n};\n// This generates the flashcard elements\n// Takes a card as an argument\nconst $3994a555bf56dffc$export$16ef63051e9ab791 = (card)=>{\n    // Creates the Term side\n    const termSide = $3994a555bf56dffc$export$f3ba7e44516b087c(card.term, \"term\");\n    // Creates the description side\n    const descriptionSide = $3994a555bf56dffc$export$f3ba7e44516b087c(card.description, \"description\");\n    // Creates an inner card that will help with the Flash Card animation\n    const innerCard = document.createElement(\"div\");\n    innerCard.className = \"innerCard\";\n    innerCard.append(termSide, descriptionSide);\n    // Creates a container for the card\n    const cardContainer = document.createElement(\"div\");\n    cardContainer.className = \"cardContainer\";\n    cardContainer.append(innerCard);\n    return cardContainer;\n};\n// Renders the flashcards to the DOM one card at a time\n// Includes next and previous buttons.\n// Takes a study set and a current index as arguments\nconst $3994a555bf56dffc$export$f58269ac8b729db4 = (set, index = 0)=>{\n    // Clear the main content area\n    const main = document.querySelector(\"main\");\n    main.innerHTML = \"\";\n    // Creates a container for the page\n    const container = document.createElement(\"div\");\n    container.className = \"cardPageContainer\";\n    // If we are not at the end of the study set\n    // Create the flash card at the current index\n    if (set.length !== 0) {\n        const currentCard = $3994a555bf56dffc$export$16ef63051e9ab791(set[index]);\n        // creates Previous button\n        const previousBtn = $3994a555bf56dffc$var$createNavigationButton(\"Previous\", ()=>{\n            // If the current index is 0, set the index to the last item in the set.\n            // Allows us to loop to the end of the set\n            index = index > 0 ? index - 1 : set.length - 1;\n            $3994a555bf56dffc$export$f58269ac8b729db4(set, index);\n        });\n        //Creates next button\n        const nextBtn = $3994a555bf56dffc$var$createNavigationButton(\"Next\", ()=>{\n            // If the current index is at the last item in the set, set the index to 0.\n            // Allows us to loop to the start of the set\n            index = index < set.length - 1 ? index + 1 : 0;\n            $3994a555bf56dffc$export$f58269ac8b729db4(set, index);\n        });\n        //Creates a container for out buttons\n        const nextAndPrevBtn = document.createElement(\"div\");\n        nextAndPrevBtn.append(previousBtn, nextBtn);\n        nextAndPrevBtn.className = \"nextAndPrevBtnContainer\";\n        //Appends card and buttons to the page container\n        container.append(currentCard, nextAndPrevBtn);\n    }\n    // Generates from for creating cards\n    const form = (0, $95a1a5ce4ae36b78$export$26b43a65ed9aa70e)(set);\n    // Sets form to be invisible\n    form.className = \"notVisible\";\n    // Creates button for toggling the form\n    const addCardBtn = (0, $54c153a8b9560190$export$934057542c6ca351)(\"Add New Card\", form);\n    addCardBtn.setAttribute(\"data-cy\", \"toggle_form\");\n    // Creates button for shuffling the cards\n    const shuffleBtn = document.createElement(\"button\");\n    shuffleBtn.textContent = \"Shuffle Cards\";\n    // Adds an event listener to the shuffle button.\n    // On click, the flashcards will be shuffled.\n    shuffleBtn.addEventListener(\"click\", ()=>$3994a555bf56dffc$var$shuffleCards(set));\n    // Appends cards form and shuffle button to the page containers\n    container.append(shuffleBtn, addCardBtn, form);\n    // Appends the container to the dom\n    main.append(container);\n};\n// Creates a navigation button\nconst $3994a555bf56dffc$var$createNavigationButton = (text, onClick)=>{\n    const btn = document.createElement(\"button\");\n    btn.textContent = text;\n    btn.addEventListener(\"click\", onClick);\n    return btn;\n};\nconst $3994a555bf56dffc$var$shuffleCards = (set)=>{\n    const shuffledCards = (0, $5cc91fecbf839bcf$export$448332262467e042)(set);\n    $3994a555bf56dffc$export$f58269ac8b729db4(shuffledCards);\n};\n\n\n//DO NOT CHANGE ANYTHING IN THIS FILE//\n//// This file is responsible for generating the form used to create a new study set.\n// This function will be used to render the new study set on submit\n\n\n\n// This function generates the form for creating new study sets\nconst $17e4b7a71224ea01$export$9cbc389274db4075 = (setCards)=>{\n    // Generates the new form element\n    const form = document.createElement(\"form\");\n    // Sets an attribute that will be used to select the form during testing\n    form.setAttribute(\"data-cy\", \"set_form\");\n    // Sets the form to invisible\n    form.className = \"notVisible\";\n    //Creates the label for the title input\n    const label = (0, $54c153a8b9560190$export$f2839682b8c07f35)(\"Card Set Title\", \"titleInput\");\n    // Creates the input fot the title\n    const input = (0, $54c153a8b9560190$export$d80fffb1deb3b97e)(\"titleInput\");\n    const submitButton = (0, $54c153a8b9560190$export$96449729d5b90cea)(\"Submit Set\");\n    // Adds an event listener to the form.\n    // On submission, a new study set will be created.\n    form.addEventListener(\"submit\", (e)=>$17e4b7a71224ea01$var$submitSet(e, setCards));\n    //Adds elements to the form\n    form.append(label, input, submitButton);\n    return form;\n};\n// This function creates a new study set.\n// It assigns a title to the set and initializes an empty array for cards,\n// which can be added later on the flashcards page.\nconst $17e4b7a71224ea01$var$submitSet = (e, setCards)=>{\n    // Prevents default form behavior and screen refresh\n    e.preventDefault();\n    //Get value form title input\n    const title = e.target.titleInput.value;\n    // Errors if user entered an empty string\n    if (!title) (0, $ff0f2a9793ea3d6a$export$3879b24e8245693d)(\"TITLE CANNOT BE EMPTY\");\n    else {\n        //Creates set object\n        const id = setCards.length ? setCards[setCards.length - 1].id + 1 : 1;\n        //Adds set data\n        setCards.push({\n            id: id,\n            title: title,\n            cards: []\n        });\n        //Adds new card set to DOM\n        (0, $f36c87adfbe6b6b2$export$b98638c281c2c630)();\n    }\n};\n\n\n\nconst $f36c87adfbe6b6b2$export$b98638c281c2c630 = ()=>{\n    // Creates a container for the pages contents\n    const container = document.createElement(\"div\");\n    container.className = \"cardPageContainer\";\n    // Creates the header for the page\n    const pageHeader = (0, $54c153a8b9560190$export$798e69447a57ffe5)(\"h2\", \"Study Set Library\", \"study-set-header\");\n    // Function creates the element representing the study card set\n    const sets = $f36c87adfbe6b6b2$var$createCardSets();\n    // Function responsible for creating the form to create a new study set.\n    const form = (0, $17e4b7a71224ea01$export$9cbc389274db4075)((0, $kfSmS.cardSets));\n    // Sets the form to be invisible\n    //Creates a button that will toggle the forms visibility\n    const toggleFormButton = (0, $54c153a8b9560190$export$934057542c6ca351)(\"Add New Set\", form);\n    // Attribute used for selecting the forms during Cypress tests.\n    toggleFormButton.setAttribute(\"data-cy\", \"toggle_form\");\n    //Appends all the content to the pages container\n    container.append(pageHeader, sets, toggleFormButton, form);\n    //Gets the main section of the dom\n    const main = document.querySelector(\"main\");\n    // Clears the main section of any existing content.\n    main.innerHTML = \"\";\n    //Appends content to the DOM\n    main.append(container);\n};\n// Render the study set preview card\n// Includes the study sets title and number of terms\n// Takes the current study set and the sets container as arguments\nconst $f36c87adfbe6b6b2$var$createSetPreviewCard = (set, setContainer)=>{\n    // Container for study set\n    const setCard = document.createElement(\"ul\");\n    setCard.className = \"cardSets\";\n    // Dynamic attribute used to select a study set during testing.\n    setCard.setAttribute(\"data-cy\", set.id);\n    // Creates the Study Sets Title element\n    const liTitle = document.createElement(\"li\");\n    liTitle.textContent = set.title;\n    // Creates the Study Sets Number of Terms element\n    const liNumberOfTerms = document.createElement(\"li\");\n    liNumberOfTerms.textContent = `Terms: ${set.cards.length}`;\n    // Adds an event listener to the study set.\n    // On click, the current page will clear, and the full study set will be rendered.\n    setCard.addEventListener(\"click\", ()=>{\n        document.querySelector(\"main\").innerHTML = \"\";\n        (0, $3994a555bf56dffc$export$f58269ac8b729db4)(set.cards);\n    });\n    // Appends elements to the set preview\n    setCard.append(liTitle, liNumberOfTerms);\n    // Appends the preview to the container\n    setContainer.append(setCard);\n};\n// Iterates through the study sets and dynamically creates their DOM elements.\nconst $f36c87adfbe6b6b2$var$createCardSets = ()=>{\n    // Creates a container for the sets\n    const setContainer = document.createElement(\"ul\");\n    setContainer.className = \"setContainer\";\n    // Iterates though the sets and creates their dom elements dynamically\n    (0, $kfSmS.cardSets).forEach((set)=>$f36c87adfbe6b6b2$var$createSetPreviewCard(set, setContainer));\n    return setContainer;\n};\n\n\n//DO NOT CHANGE ANYTHING IN THIS FILE//\n//This file is responsible for rendering the About page,\n//including loading any content about the application and organization.\n//This imports helper functions\n//This imports the image\n\n\nconst $d95c1a7b3e9205e3$export$967e639dc382139b = ()=>{\n    // Clear the main content area\n    const main = document.querySelector(\"main\");\n    main.innerHTML = \"\";\n    // Create the outer container for the about section\n    const containerOuter = document.createElement(\"div\");\n    containerOuter.className = \"aboutContainer\";\n    // Create the text container for the heading, subheading, and paragraph\n    const textContainer = document.createElement(\"div\");\n    textContainer.className = \"textContainer\";\n    // Create and set up the heading\n    const heading = (0, $54c153a8b9560190$export$798e69447a57ffe5)(\"h2\", \"About Study Night\", \"about_page\");\n    // Create and set up the subheading\n    const subHeading = (0, $54c153a8b9560190$export$c8a8987d4410bf2d)(\"h3\", \"Flash Cards Anywhere Anytime\");\n    // Create and set up the paragraph\n    let text = \"Whether you're studying at night or during the day, Study Night's flashcard application is designed to help you grow your skills in any subject. Whether you're preparing for an exam or learning a new language, Study Night makes it easy to create flashcard sets that are available anytime, anywhere.\\n\\nStudy Night was created by experienced educators and developers who are passionate about helping students achieve their goals and making learning more accessible.\";\n    const aboutP = (0, $54c153a8b9560190$export$c8a8987d4410bf2d)(\"p\", text);\n    // Create and set up the image\n    const aboutImage = (0, $54c153a8b9560190$export$ec664d7487540b)((0, {}), \"Child Studying\");\n    // Append the text elements to the text container\n    textContainer.append(heading, subHeading, aboutP);\n    // Append the text container and image to the outer container\n    containerOuter.append(textContainer, aboutImage);\n    // Append the outer container to the main content area\n    main.append(containerOuter);\n};\n\n\n//DO NOT CHANGE ANYTHING IN THIS FILE//\n// This file is responsible for loading the home page\n//Imports image for homepage\n\n\n//Renders home page\nconst $903df522cdb2acbe$export$29b010004a948d8 = ()=>{\n    //Gets main element\n    const main = document.querySelector(\"main\");\n    main.innerHTML = \"\";\n    //Creates header element\n    const header = (0, $54c153a8b9560190$export$798e69447a57ffe5)(\"h1\", \"Study Night\", \"home_header\");\n    //Creates subheader element\n    const subHeading = (0, $54c153a8b9560190$export$c8a8987d4410bf2d)(\"h2\", \"A Digital Study Solution for the Modern World\");\n    //Creates elements\n    const image = (0, $54c153a8b9560190$export$ec664d7487540b)((0, {}), \"Desk of laptops\");\n    //Container for elements\n    const homeContainer = document.createElement(\"div\");\n    homeContainer.className = \"homeContainer\";\n    homeContainer.append(header, subHeading, image);\n    main.append(homeContainer);\n};\n\n\n// Navigation logic\nconst $967b3c38971ef49c$var$addListenerToNavigation = ()=>{\n    $967b3c38971ef49c$var$addNavListener(\"cardSetPage\", (0, $f36c87adfbe6b6b2$export$b98638c281c2c630));\n    $967b3c38971ef49c$var$addNavListener(\"aboutPage\", (0, $d95c1a7b3e9205e3$export$967e639dc382139b));\n    $967b3c38971ef49c$var$addNavListener(\"homePage\", (0, $903df522cdb2acbe$export$29b010004a948d8));\n};\n// Helper function to add event listeners to navigation items\nconst $967b3c38971ef49c$var$addNavListener = (elementId, callback)=>{\n    const element = document.getElementById(elementId);\n    if (element) element.addEventListener(\"click\", callback);\n};\n// Initialize the page\n// Load the home page\n(0, $903df522cdb2acbe$export$29b010004a948d8)();\n// Add event listeners to navigation items\n$967b3c38971ef49c$var$addListenerToNavigation();\n\n\n//# sourceMappingURL=starter.6338ddcd.js.map\n","//DO NOT CHANGE ANYTHING IN THIS FILE//\r\n// This file is responsible for the navigation menu and the initial loading of the project.\r\n\r\n//These are all the functions that render the pages\r\nimport { renderCardSetsPage } from \"./cardSetsPage.js\";\r\nimport { renderAboutPage } from \"./aboutPage.js\";\r\nimport { renderHomePage } from \"./homePage.js\";\r\n\r\n// Navigation logic\r\nconst addListenerToNavigation = () => {\r\n  addNavListener(\"cardSetPage\", renderCardSetsPage);\r\n  addNavListener(\"aboutPage\", renderAboutPage);\r\n  addNavListener(\"homePage\", renderHomePage);\r\n};\r\n\r\n// Helper function to add event listeners to navigation items\r\nconst addNavListener = (elementId, callback) => {\r\n  const element = document.getElementById(elementId);\r\n  if (element) {\r\n    element.addEventListener(\"click\", callback);\r\n  }\r\n};\r\n\r\n// Initialize the page\r\n// Load the home page\r\nrenderHomePage();\r\n// Add event listeners to navigation items\r\naddListenerToNavigation();\r\n\r\n","//DO NOT CHANGE ANYTHING IN THIS FILE//\r\n\r\n// Our application contains flashcard study sets.\r\n// This file is responsible for loading the page that\r\n// displays the collection of sets.\r\n// Users can click on a set to view and interact with the flashcards.\r\n\r\n// Loads data for card sets\r\nimport { cardSets } from \"../data/data.js\";\r\n// Function responsible for rendering flashcards page\r\nimport { renderFlashCards } from \"./cardsPage.js\";\r\n// Function responsible for creating the form to create a new study set.\r\nimport { createSetForm } from \"./createSet.js\";\r\n// Functions responsible for creating the pages header\r\n//and a toggle button used to toggle the forms visibility\r\nimport { createHeader, createToggleButton } from \"./utilityRenderFunctions.js\";\r\n\r\n// Function responsible for rendering the page\r\nexport const renderCardSetsPage = () => {\r\n  // Creates a container for the pages contents\r\n  const container = document.createElement(\"div\");\r\n  container.className = \"cardPageContainer\";\r\n  // Creates the header for the page\r\n  const pageHeader = createHeader(\r\n    \"h2\",\r\n    \"Study Set Library\",\r\n    \"study-set-header\"\r\n  );\r\n\r\n  // Function creates the element representing the study card set\r\n  const sets = createCardSets();\r\n  // Function responsible for creating the form to create a new study set.\r\n  const form = createSetForm(cardSets);\r\n  // Sets the form to be invisible\r\n\r\n  //Creates a button that will toggle the forms visibility\r\n  const toggleFormButton = createToggleButton(\"Add New Set\", form);\r\n  // Attribute used for selecting the forms during Cypress tests.\r\n  toggleFormButton.setAttribute(\"data-cy\", \"toggle_form\");\r\n\r\n  //Appends all the content to the pages container\r\n  container.append(pageHeader, sets, toggleFormButton, form);\r\n\r\n  //Gets the main section of the dom\r\n  const main = document.querySelector(\"main\");\r\n  // Clears the main section of any existing content.\r\n  main.innerHTML = \"\";\r\n  //Appends content to the DOM\r\n  main.append(container);\r\n};\r\n\r\n// Render the study set preview card\r\n// Includes the study sets title and number of terms\r\n// Takes the current study set and the sets container as arguments\r\nconst createSetPreviewCard = (set, setContainer) => {\r\n  // Container for study set\r\n  const setCard = document.createElement(\"ul\");\r\n  setCard.className = \"cardSets\";\r\n  // Dynamic attribute used to select a study set during testing.\r\n  setCard.setAttribute(\"data-cy\", set.id);\r\n\r\n  // Creates the Study Sets Title element\r\n  const liTitle = document.createElement(\"li\");\r\n  liTitle.textContent = set.title;\r\n\r\n  // Creates the Study Sets Number of Terms element\r\n  const liNumberOfTerms = document.createElement(\"li\");\r\n  liNumberOfTerms.textContent = `Terms: ${set.cards.length}`;\r\n\r\n  // Adds an event listener to the study set.\r\n  // On click, the current page will clear, and the full study set will be rendered.\r\n  setCard.addEventListener(\"click\", () => {\r\n    document.querySelector(\"main\").innerHTML = \"\";\r\n    renderFlashCards(set.cards);\r\n  });\r\n\r\n  // Appends elements to the set preview\r\n  setCard.append(liTitle, liNumberOfTerms);\r\n  // Appends the preview to the container\r\n  setContainer.append(setCard);\r\n};\r\n\r\n// Iterates through the study sets and dynamically creates their DOM elements.\r\nconst createCardSets = () => {\r\n  // Creates a container for the sets\r\n  const setContainer = document.createElement(\"ul\");\r\n  setContainer.className = \"setContainer\";\r\n  // Iterates though the sets and creates their dom elements dynamically\r\n  cardSets.forEach((set) => createSetPreviewCard(set, setContainer));\r\n  return setContainer;\r\n};\r\n","//DO NOT CHANGE ANYTHING IN THIS FILE//\r\n\r\n// This file is responsible for rendering the full flashcard set,\r\n// with buttons to navigate between cards, a form to create new cards,\r\n// and a button to shuffle the cards.\r\n\r\n// This function is responsible for generating the form used to create a new card.\r\nimport { renderCardForm } from \"./createCard\";\r\n// This function is responsible for shuffling the flashcard\r\nimport { shuffle } from \"./shuffle\";\r\n// Functions responsible for creating toggle button used to toggle the forms visibility\r\nimport { createToggleButton } from \"./utilityRenderFunctions.js\";\r\n\r\n// The flash cards have two sides\r\n// This generates one side of a flashcard card\r\nconst renderSide = (text, className) => {\r\n  // Creates a container element for the card\r\n  const div = document.createElement(\"div\");\r\n  // Creates the paragraph that will hold the text content\r\n  const p = document.createElement(\"p\");\r\n  p.textContent = text;\r\n  div.className = className;\r\n  //Appends the content to the container\r\n  div.append(p);\r\n  return div;\r\n};\r\n\r\n// This generates the flashcard elements\r\n// Takes a card as an argument\r\nconst generateFlashCard = (card) => {\r\n  // Creates the Term side\r\n  const termSide = renderSide(card.term, \"term\");\r\n  // Creates the description side\r\n  const descriptionSide = renderSide(card.description, \"description\");\r\n\r\n  // Creates an inner card that will help with the Flash Card animation\r\n  const innerCard = document.createElement(\"div\");\r\n  innerCard.className = \"innerCard\";\r\n  innerCard.append(termSide, descriptionSide);\r\n\r\n  // Creates a container for the card\r\n  const cardContainer = document.createElement(\"div\");\r\n  cardContainer.className = \"cardContainer\";\r\n  cardContainer.append(innerCard);\r\n\r\n  return cardContainer;\r\n};\r\n\r\n// Renders the flashcards to the DOM one card at a time\r\n// Includes next and previous buttons.\r\n// Takes a study set and a current index as arguments\r\nconst renderFlashCards = (set, index = 0) => {\r\n  // Clear the main content area\r\n  const main = document.querySelector(\"main\");\r\n  main.innerHTML = \"\";\r\n\r\n  // Creates a container for the page\r\n  const container = document.createElement(\"div\");\r\n  container.className = \"cardPageContainer\";\r\n\r\n  // If we are not at the end of the study set\r\n  // Create the flash card at the current index\r\n  if (set.length !== 0) {\r\n    const currentCard = generateFlashCard(set[index]);\r\n\r\n    // creates Previous button\r\n    const previousBtn = createNavigationButton(\"Previous\", () => {\r\n      // If the current index is 0, set the index to the last item in the set.\r\n      // Allows us to loop to the end of the set\r\n      index = index > 0 ? index - 1 : set.length - 1;\r\n      renderFlashCards(set, index);\r\n    });\r\n\r\n    //Creates next button\r\n    const nextBtn = createNavigationButton(\"Next\", () => {\r\n      // If the current index is at the last item in the set, set the index to 0.\r\n      // Allows us to loop to the start of the set\r\n      index = index < set.length - 1 ? index + 1 : 0;\r\n      renderFlashCards(set, index);\r\n    });\r\n\r\n    //Creates a container for out buttons\r\n    const nextAndPrevBtn = document.createElement(\"div\");\r\n    nextAndPrevBtn.append(previousBtn, nextBtn);\r\n    nextAndPrevBtn.className = \"nextAndPrevBtnContainer\";\r\n\r\n    //Appends card and buttons to the page container\r\n    container.append(currentCard, nextAndPrevBtn);\r\n  }\r\n\r\n  // Generates from for creating cards\r\n  const form = renderCardForm(set);\r\n  // Sets form to be invisible\r\n  form.className = \"notVisible\";\r\n\r\n  // Creates button for toggling the form\r\n  const addCardBtn = createToggleButton(\"Add New Card\", form);\r\n  addCardBtn.setAttribute(\"data-cy\", \"toggle_form\");\r\n\r\n  // Creates button for shuffling the cards\r\n  const shuffleBtn = document.createElement(\"button\");\r\n  shuffleBtn.textContent = \"Shuffle Cards\";\r\n\r\n  // Adds an event listener to the shuffle button.\r\n  // On click, the flashcards will be shuffled.\r\n  shuffleBtn.addEventListener(\"click\", () => shuffleCards(set));\r\n\r\n  // Appends cards form and shuffle button to the page containers\r\n  container.append(shuffleBtn, addCardBtn, form);\r\n  // Appends the container to the dom\r\n  main.append(container);\r\n};\r\n\r\n// Creates a navigation button\r\nconst createNavigationButton = (text, onClick) => {\r\n  const btn = document.createElement(\"button\");\r\n  btn.textContent = text;\r\n  btn.addEventListener(\"click\", onClick);\r\n  return btn;\r\n};\r\n\r\nconst shuffleCards = (set) => {\r\n  const shuffledCards = shuffle(set);\r\n  renderFlashCards(shuffledCards);\r\n};\r\n\r\nexport { renderSide, generateFlashCard, renderFlashCards };\r\n","//DO NOT CHANGE ANYTHING IN THIS FILE//\r\n\r\n// This file is responsible for the form that creates a new flashcard.\r\n\r\n// This function is responsible for rendering a flashcard.\r\n// It will be called upon form submission to render the newly created card.\r\nimport { renderFlashCards } from \"./cardsPage.js\";\r\n// This function is responsible for showing an error\r\nimport { showError } from \"./errors.js\";\r\n// These functions generate elements for our form and our header element\r\nimport {\r\n  createLabel,\r\n  createInput,\r\n  createHeader,\r\n  createSubmitButton,\r\n} from \"./utilityRenderFunctions.js\";\r\n\r\n// This function will generate the create card form\r\nconst renderCardForm = (set) => {\r\n  // Create a header for the form\r\n  const h3 = createHeader(\"h3\", \"Create Cards\", \"create_cards\");\r\n\r\n  // Creates form element\r\n  const cardForm = document.createElement(\"form\");\r\n  // Sets an attribute that will be used to select the form during testing\r\n  cardForm.setAttribute(\"data-cy\", \"card_form\");\r\n\r\n  // Creates a label for the Term input\r\n  const termLabel = createLabel(\"Term\", \"termInput\");\r\n  // Creates input for the term\r\n  const termInput = createInput(\"termInput\");\r\n\r\n  // Creates label for description\r\n  const descriptionLabel = createLabel(\"Description\", \"descriptionInput\");\r\n  // Creates input for description\r\n  const descriptionInput = createInput(\"descriptionInput\");\r\n\r\n  //Creates submit input\r\n  const addCardBtn = createSubmitButton(\"Add Card\");\r\n  // Handle form submission ane errors\r\n  cardForm.addEventListener(\"submit\", (e) => {\r\n    // Prevents forms default behavior\r\n    e.preventDefault();\r\n    // Gets the input values from term and description\r\n    const term = e.target.termInput.value;\r\n    const description = e.target.descriptionInput.value;\r\n    // Handles error if user enters an empty string in any of the inputs\r\n    if (!term && !description) {\r\n      showError(\"TERM AND DESCRIPTION CANNOT BE EMPTY\");\r\n    } else if (!term) {\r\n      showError(\"TERM CANNOT BE EMPTY\");\r\n    } else if (!description) {\r\n      showError(\"DESCRIPTION CANNOT BE EMPTY\");\r\n    } else {\r\n      addCard(term, description, set);\r\n    }\r\n  });\r\n\r\n  // Append form elements to the form\r\n  cardForm.append(\r\n    termLabel,\r\n    termInput,\r\n    descriptionLabel,\r\n    descriptionInput,\r\n    addCardBtn\r\n  );\r\n\r\n  // Creates a container for the form elements and header\r\n  const container = document.createElement(\"div\");\r\n  container.append(h3, cardForm);\r\n\r\n  return container;\r\n};\r\n\r\n// Function to add a new card to the data set\r\nconst addCard = (term, description, set) => {\r\n  set.push({ term, description });\r\n  renderFlashCards(set, set.length - 1); // Render the new card\r\n};\r\n\r\nexport { renderCardForm };\r\n","//DO NOT CHANGE ANYTHING IN THIS FILE//\r\n\r\n//This file is responsible for creating errors for our form\r\nconst showError = (message) => {\r\n  const form = document.querySelector(\"form\");\r\n  const existingError = document.querySelector(\".error\");\r\n\r\n  if (!existingError) {\r\n    const error = document.createElement(\"p\");\r\n    error.textContent = message;\r\n    error.style.color = \"red\";\r\n    error.className = \"error\";\r\n    form.appendChild(error);\r\n  } else if (existingError.textContent !== message) {\r\n    existingError.textContent = message;\r\n  }\r\n};\r\n\r\nexport { showError };\r\n","// Create a general element with specified text\r\nconst createElement = (elementType, text) => {\r\n  const element = document.createElement(elementType)\r\n  element.textContent = text\r\n  return element\r\n}\r\n\r\n// Creates images with alt attribute\r\nconst createImage = (url, alt) => {\r\n  const img = document.createElement('img')\r\n  img.src = url\r\n  img.alt = alt\r\n  return img\r\n}\r\n\r\n// Create a header element with specified text and data attribute\r\nconst createHeader = (headerType, text, dataCy) => {\r\n  const header = document.createElement(headerType)\r\n  header.textContent = text\r\n  header.setAttribute('data-cy', dataCy)\r\n  return header\r\n}\r\n\r\n// Create a button that toggles the visibility of the form\r\nconst createToggleButton = (text, element) => {\r\n  const button = document.createElement('button')\r\n  button.textContent = text\r\n  button.addEventListener('click', () => {\r\n    element.classList.toggle('notVisible')\r\n  })\r\n  return button\r\n}\r\n\r\n// Form Helper Functions\r\n// Helper function to create a label element\r\nconst createLabel = (text, htmlFor) => {\r\n  const label = document.createElement('label')\r\n  label.textContent = text\r\n  label.setAttribute('for', htmlFor)\r\n  return label\r\n}\r\n\r\n// Helper function to create an input element\r\nconst createInput = (name) => {\r\n  const input = document.createElement('input')\r\n  input.name = name\r\n  input.id = name\r\n  return input\r\n}\r\n\r\n// Helper function to create a submit button\r\nconst createSubmitButton = (value) => {\r\n  const submit = document.createElement('input')\r\n  submit.type = 'submit'\r\n  submit.value = value\r\n  return submit\r\n}\r\n\r\nexport {\r\n  createElement,\r\n  createImage,\r\n  createHeader,\r\n  createToggleButton,\r\n  createLabel,\r\n  createInput,\r\n  createSubmitButton,\r\n}\r\n","const shuffle = (cards) => {\r\n  let current = cards.length\r\n  let newCardsArray = [...cards]\r\n  while (current > 0) {\r\n    let randomIndex = Math.floor(Math.random() * current)\r\n    current--\r\n\r\n    [newCardsArray[current], newCardsArray[randomIndex]] = [\r\n      newCardsArray[randomIndex],\r\n      newCardsArray[current],\r\n    ]\r\n  }\r\n  return newCardsArray\r\n}\r\n\r\nexport { shuffle }\r\n\r\n","//DO NOT CHANGE ANYTHING IN THIS FILE//\r\n\r\n//// This file is responsible for generating the form used to create a new study set.\r\n\r\n// This function will be used to render the new study set on submit\r\nimport { renderCardSetsPage } from \"./cardSetsPage.js\";\r\n// This function will render errors\r\nimport { showError } from \"./errors.js\";\r\n\r\n// These function create elements for our form\r\nimport {\r\n  createLabel,\r\n  createInput,\r\n  createSubmitButton,\r\n} from \"./utilityRenderFunctions.js\";\r\n\r\n// This function generates the form for creating new study sets\r\nconst createSetForm = (setCards) => {\r\n  // Generates the new form element\r\n  const form = document.createElement(\"form\");\r\n  // Sets an attribute that will be used to select the form during testing\r\n  form.setAttribute(\"data-cy\", \"set_form\");\r\n  // Sets the form to invisible\r\n  form.className = \"notVisible\";\r\n\r\n  //Creates the label for the title input\r\n  const label = createLabel(\"Card Set Title\", \"titleInput\");\r\n  // Creates the input fot the title\r\n  const input = createInput(\"titleInput\");\r\n  const submitButton = createSubmitButton(\"Submit Set\");\r\n\r\n  // Adds an event listener to the form.\r\n  // On submission, a new study set will be created.\r\n  form.addEventListener(\"submit\", (e) => submitSet(e, setCards));\r\n\r\n  //Adds elements to the form\r\n  form.append(label, input, submitButton);\r\n  return form;\r\n};\r\n\r\n// This function creates a new study set.\r\n// It assigns a title to the set and initializes an empty array for cards,\r\n// which can be added later on the flashcards page.\r\nconst submitSet = (e, setCards) => {\r\n  // Prevents default form behavior and screen refresh\r\n  e.preventDefault();\r\n\r\n  //Get value form title input\r\n  const title = e.target.titleInput.value;\r\n\r\n  // Errors if user entered an empty string\r\n  if (!title) {\r\n    showError(\"TITLE CANNOT BE EMPTY\");\r\n  } else {\r\n    //Creates set object\r\n    const id = setCards.length ? setCards[setCards.length - 1].id + 1 : 1;\r\n    //Adds set data\r\n    setCards.push({ id, title, cards: [] });\r\n\r\n    //Adds new card set to DOM\r\n    renderCardSetsPage();\r\n  }\r\n};\r\n\r\nexport { createSetForm };\r\n","//DO NOT CHANGE ANYTHING IN THIS FILE//\r\n\r\n//This file is responsible for rendering the About page,\r\n//including loading any content about the application and organization.\r\n//This imports helper functions\r\n//This imports the image\r\nimport aboutPageImage from \"../images/aboutImage.png\";\r\n// This function creates a header element\r\nimport {\r\n  createHeader,\r\n  createElement,\r\n  createImage,\r\n} from \"./utilityRenderFunctions.js\";\r\n\r\nexport const renderAboutPage = () => {\r\n  // Clear the main content area\r\n  const main = document.querySelector(\"main\");\r\n  main.innerHTML = \"\";\r\n\r\n  // Create the outer container for the about section\r\n  const containerOuter = document.createElement(\"div\");\r\n  containerOuter.className = \"aboutContainer\";\r\n\r\n  // Create the text container for the heading, subheading, and paragraph\r\n  const textContainer = document.createElement(\"div\");\r\n  textContainer.className = \"textContainer\";\r\n\r\n  // Create and set up the heading\r\n  const heading = createHeader(\"h2\", \"About Study Night\", \"about_page\");\r\n\r\n  // Create and set up the subheading\r\n  const subHeading = createElement(\"h3\", \"Flash Cards Anywhere Anytime\");\r\n\r\n  // Create and set up the paragraph\r\n  let text =\r\n    \"Whether you're studying at night or during the day, Study Night's flashcard application is designed to help you grow your skills in any subject. Whether you're preparing for an exam or learning a new language, Study Night makes it easy to create flashcard sets that are available anytime, anywhere.\\n\\nStudy Night was created by experienced educators and developers who are passionate about helping students achieve their goals and making learning more accessible.\";\r\n  const aboutP = createElement(\"p\", text);\r\n\r\n  // Create and set up the image\r\n  const aboutImage = createImage(aboutPageImage, \"Child Studying\");\r\n\r\n  // Append the text elements to the text container\r\n  textContainer.append(heading, subHeading, aboutP);\r\n\r\n  // Append the text container and image to the outer container\r\n  containerOuter.append(textContainer, aboutImage);\r\n\r\n  // Append the outer container to the main content area\r\n  main.append(containerOuter);\r\n};\r\n","//DO NOT CHANGE ANYTHING IN THIS FILE//\r\n// This file is responsible for loading the home page\r\n//Imports image for homepage\r\nimport homePageImage from \"../images/homePage.png\";\r\n//Helper functions\r\nimport {\r\n  createHeader,\r\n  createElement,\r\n  createImage,\r\n} from \"./utilityRenderFunctions.js\";\r\n\r\n//Renders home page\r\nconst renderHomePage = () => {\r\n  //Gets main element\r\n  const main = document.querySelector(\"main\");\r\n  main.innerHTML = \"\";\r\n\r\n  //Creates header element\r\n  const header = createHeader(\"h1\", \"Study Night\", \"home_header\");\r\n\r\n  //Creates subheader element\r\n  const subHeading = createElement(\r\n    \"h2\",\r\n    \"A Digital Study Solution for the Modern World\"\r\n  );\r\n\r\n  //Creates elements\r\n  const image = createImage(homePageImage, \"Desk of laptops\");\r\n\r\n  //Container for elements\r\n  const homeContainer = document.createElement(\"div\");\r\n  homeContainer.className = \"homeContainer\";\r\n\r\n  homeContainer.append(header, subHeading, image);\r\n  main.append(homeContainer);\r\n};\r\n\r\nexport { renderHomePage };\r\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$kfSmS","$ff0f2a9793ea3d6a$export$3879b24e8245693d","message","form","document","querySelector","existingError","textContent","error","createElement","style","color","className","appendChild","$54c153a8b9560190$export$c8a8987d4410bf2d","elementType","text","element","$54c153a8b9560190$export$ec664d7487540b","url","alt","img","src","$54c153a8b9560190$export$798e69447a57ffe5","headerType","dataCy","header","setAttribute","$54c153a8b9560190$export$934057542c6ca351","button","addEventListener","classList","toggle","$54c153a8b9560190$export$f2839682b8c07f35","htmlFor","label","$54c153a8b9560190$export$d80fffb1deb3b97e","name","input","$54c153a8b9560190$export$96449729d5b90cea","value","submit","type","$95a1a5ce4ae36b78$export$26b43a65ed9aa70e","set","h3","cardForm","termLabel","termInput","descriptionLabel","descriptionInput","addCardBtn","e","preventDefault","term","target","description","$95a1a5ce4ae36b78$var$addCard","append","container","push","$3994a555bf56dffc$export$f58269ac8b729db4","length","$5cc91fecbf839bcf$export$448332262467e042","cards","current","newCardsArray","randomIndex","Math","floor","random","$3994a555bf56dffc$export$f3ba7e44516b087c","div","p","$3994a555bf56dffc$export$16ef63051e9ab791","card","termSide","descriptionSide","innerCard","cardContainer","index","main","innerHTML","currentCard","previousBtn","$3994a555bf56dffc$var$createNavigationButton","nextBtn","nextAndPrevBtn","shuffleBtn","$3994a555bf56dffc$var$shuffleCards","onClick","btn","$17e4b7a71224ea01$export$9cbc389274db4075","setCards","submitButton","$17e4b7a71224ea01$var$submitSet","title","titleInput","$f36c87adfbe6b6b2$export$b98638c281c2c630","pageHeader","sets","$f36c87adfbe6b6b2$var$createCardSets","cardSets","toggleFormButton","$f36c87adfbe6b6b2$var$createSetPreviewCard","setContainer","setCard","liTitle","liNumberOfTerms","forEach","$903df522cdb2acbe$export$29b010004a948d8","subHeading","image","homeContainer","$967b3c38971ef49c$var$addNavListener","elementId","callback","getElementById","containerOuter","textContainer","heading","aboutP","aboutImage"],"version":3,"file":"starter.6338ddcd.js.map"}